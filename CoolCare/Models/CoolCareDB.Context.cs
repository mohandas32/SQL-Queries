//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoolCare.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class coolcareEntities3 : DbContext
    {
        public coolcareEntities3()
            : base("name=coolcareEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bookservice> Bookservices { get; set; }
        public DbSet<ContactU> ContactUs { get; set; }
        public DbSet<Feedback> Feedbacks { get; set; }
        public DbSet<GenerateReport> GenerateReports { get; set; }
        public DbSet<Package> Packages { get; set; }
        public DbSet<Payment> Payments { get; set; }
        public DbSet<Service> Services { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserType> UserTypes { get; set; }
    
        public virtual int AddPackageDetails(Nullable<int> userid, string typeofpackage, Nullable<decimal> amount, string actype, string accapacity)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var typeofpackageParameter = typeofpackage != null ?
                new ObjectParameter("typeofpackage", typeofpackage) :
                new ObjectParameter("typeofpackage", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var actypeParameter = actype != null ?
                new ObjectParameter("actype", actype) :
                new ObjectParameter("actype", typeof(string));
    
            var accapacityParameter = accapacity != null ?
                new ObjectParameter("accapacity", accapacity) :
                new ObjectParameter("accapacity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPackageDetails", useridParameter, typeofpackageParameter, amountParameter, actypeParameter, accapacityParameter);
        }
    
        public virtual int AddServices(string servicename, string servicedesc, Nullable<decimal> price)
        {
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var servicedescParameter = servicedesc != null ?
                new ObjectParameter("servicedesc", servicedesc) :
                new ObjectParameter("servicedesc", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddServices", servicenameParameter, servicedescParameter, priceParameter);
        }
    
        public virtual int AddTechnician(string email, string pass, Nullable<int> usertypeid)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var usertypeidParameter = usertypeid.HasValue ?
                new ObjectParameter("usertypeid", usertypeid) :
                new ObjectParameter("usertypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTechnician", emailParameter, passParameter, usertypeidParameter);
        }
    
        public virtual int AssignTechnician(Nullable<int> serviceid, Nullable<int> technicinaid)
        {
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var technicinaidParameter = technicinaid.HasValue ?
                new ObjectParameter("technicinaid", technicinaid) :
                new ObjectParameter("technicinaid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignTechnician", serviceidParameter, technicinaidParameter);
        }
    
        public virtual int BookService(string address, string noofac, string typeofac, Nullable<int> typeofservice, Nullable<int> userid)
        {
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var noofacParameter = noofac != null ?
                new ObjectParameter("noofac", noofac) :
                new ObjectParameter("noofac", typeof(string));
    
            var typeofacParameter = typeofac != null ?
                new ObjectParameter("typeofac", typeofac) :
                new ObjectParameter("typeofac", typeof(string));
    
            var typeofserviceParameter = typeofservice.HasValue ?
                new ObjectParameter("typeofservice", typeofservice) :
                new ObjectParameter("typeofservice", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookService", addressParameter, noofacParameter, typeofacParameter, typeofserviceParameter, useridParameter);
        }
    
        public virtual int EditProfileData(Nullable<int> id, string firstname, string lastname, string mobileno, string email, string state, string city, string address, string pincode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("mobileno", mobileno) :
                new ObjectParameter("mobileno", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditProfileData", idParameter, firstnameParameter, lastnameParameter, mobilenoParameter, emailParameter, stateParameter, cityParameter, addressParameter, pincodeParameter);
        }
    
        public virtual int InsertFeedback(string feedbackcontent, Nullable<int> userid)
        {
            var feedbackcontentParameter = feedbackcontent != null ?
                new ObjectParameter("feedbackcontent", feedbackcontent) :
                new ObjectParameter("feedbackcontent", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFeedback", feedbackcontentParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_getServiceNameFromServiceId_Result> sp_getServiceNameFromServiceId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getServiceNameFromServiceId_Result>("sp_getServiceNameFromServiceId");
        }
    
        public virtual ObjectResult<testing_Result> testing(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<testing_Result>("testing", idParameter);
        }
    }
}
